grammar sophia;

    sophia :classDeclaration*  EOF ;
    type : INT | STRING | BOOL ;

    classDeclaration : CLASS a=IDENTIFIER (EXTENDS b=IDENTIFIER)?
    {
           if ($b.text == null){
               System.out.println("ClassDec:"+$a.text);
           } else {
               System.out.println("ClassDec:"+$a.text+", "+$b.text);
           }
       }
    classBody;

    classBody : LBRACE classBodyDeclaration RBRACE ;

    classBodyDeclaration : SEMI | block* | memberDeclaration* ;

    memberDeclaration : methodDeclaration | constructorDeclaration | fieldDeclaration | statement;

    methodDeclaration : DEF methodType a=IDENTIFIER LPAREN
        {
                System.out.println("MethodDec:"+$a.text);
        }
        methodArguements? RPAREN methodBody;

    methodArguements : listvariableDeclaration (COMMA listvariableDeclaration)* ;

    methodType : type | VOID ;

    methodBody : LBRACE ((variableDeclaration SEMI)* blockStatements)? RBRACE;

    methodCall : ((IDENTIFIER | THIS | methodCallBody) DOT)? methodCallBody
                {
                        System.out.println("MethodCall");
                }
                ;

    methodCallBody : IDENTIFIER LPAREN expr? (COMMA expr)* RPAREN ;

    constructorDeclaration : DEF a=IDENTIFIER LPAREN
            {
                    System.out.println("ConstructorDec:"+$a.text);
            }
            methodArguements? RPAREN methodBody;

    fieldDeclaration : variableDeclaration SEMI | variableInitializer SEMI;

    variableDeclaration : a=IDENTIFIER COLON
            {
                    System.out.println("VarDec:"+$a.text);
            }
            (listDeclaration | type | IDENTIFIER);

    listvariableDeclaration : IDENTIFIER COLON (listDeclaration | type | IDENTIFIER);

    variableInitializer : assignment ;

    funcPointerDeclaration : IDENTIFIER COLON funcPointerDeclarationBody SEMI;

    funcPointerDeclarationBody : FUNC '<' (VOID | (type (COMMA type)*)) ARROW type '>';

    listDeclaration : LIST LPAREN (( POS_INT '#' (type | listDeclaration)) | (listBody (COMMA listBody)* )) RPAREN;

    listBody : listvariableDeclaration | funcPointerDeclaration | listDeclaration | type ;

    block : LBRACE blockStatements? RBRACE ;

    blockStatements : blockStatement+ ;

    blockStatement : statement ;

    statement : ifStatement | forStatement | foreachStatement | statementWithoutTrailingSubstatement ;

    ifStatement : IF
            {
                System.out.println("Conditional:if");
            }
            (ELSE IF b=condition_block {
                System.out.println("Conditional:if");
                System.out.println("Conditional:else");
            })* (ELSE c=statBlock
            {
                System.out.println("Conditional:else");
            })?
            condition_block;

    condition_block : expr statBlock ;

    statBlock : statement | LBRACE block RBRACE ;

    statementWithoutTrailingSubstatement : block | emptyStatement | expStatement
                                            | breakStatement | continueStatement | returnStatement | printStatement;

    expStatement : statementExp SEMI ;

    statementExp : assignment | preExp | postExp | methodCall ;

    forStatement : FOR
                {
                        System.out.println("Loop:for");
                }
                LPAREN initialStatement? SEMI expr? SEMI updateStatement? RPAREN statBlock;

    initialStatement : assignment (COMMA assignment)* ;

    updateStatement :  assignment (COMMA assignment)* ;

    foreachStatement : FOREACH LPAREN IDENTIFIER IN
                    {
                            System.out.println("Loop:foreach");
                    }
                    (IDENTIFIER(DOT IDENTIFIER)? | THIS DOT IDENTIFIER | expr) RPAREN statBlock;


    breakStatement : BREAK SEMI
                {
                        System.out.println("Control:break");
                }
                ;

    continueStatement : CONTINUE SEMI
                    {
                            System.out.println("Control:continue");
                    }
                    ;

    returnStatement : RETURN
        {
                System.out.println("Return");
        }
        expr? SEMI;

    assignment : leftHand (ASSIGN (expr | listInitializer | classAssignment)+)+
                    {
                        System.out.println("Operator:=");
                    }
                    ;

    leftHand : ((THIS | expr) (DOT afterDot)* | expr) ;

    index : (LBRACK expr RBRACK)* ;

    afterDot : (methodCallBody | (IDENTIFIER | THIS)) index? ;

    classAssignment : NEW IDENTIFIER LPAREN expr? (COMMA expr)* RPAREN ;

    listInitializer : LBRACK ((listInitializer | expr) (COMMA (listInitializer | expr))*) RBRACK ;

    preExp : (DEC | INC) literal ;

    postExp : literal (DEC | INC) ;


    expr :
             methodCallBody
            | expr DOT expr
            | postExp
            | preExp
            | NOT expr
            | expr op=(MUL | DIV | MOD) expr
                    {
                        if ($op.text != null){
                            System.out.println("Operator:"+$op.text);
                        }
                    }
            | expr op=(ADD | SUB) expr
                    {
                        if ($op.text != null){
                            System.out.println("Operator:"+$op.text);
                        }
                    }
            | expr op=(LE | GE | LT | GT) expr
                    {
                        if ($op.text != null){
                            System.out.println("Operator:"+$op.text);
                        }
                    }
            | expr op=(EQUAL | NOTEQUAL | ASSIGN) expr
                    {
                        if ($op.text != null){
                            System.out.println("Operator:"+$op.text);
                        }
                    }
            | expr AND expr
            | expr OR expr
            | literal index?
            | afterDot
            ;


    literal :
         LPAREN expr? RPAREN
         | IDENTIFIER
         | intLiteral
         | BOOL_LITERAL
         | STRING_LITERAL
         ;

    printStatement : PRINT LPAREN printBody RPAREN SEMI
                    {
                            System.out.println("Built-in:print");
                    }
                    ;

    printBody : expr;

    emptyStatement : SEMI ;

    comment : COMMENT ;

    CLASS : 'class' ;
    EXTENDS : 'extends' ;
    THIS : 'this' ;
    DEF : 'def' ;
    FUNC : 'func' ;
    RETURN : 'return' ;
    IF : 'if' ;
    ELSE : 'else' ;
    FOR : 'for' ;
    FOREACH : 'foreach' ;
    CONTINUE : 'continue' ;
    BREAK : 'break' ;
    FALSE : 'false' ;
    TRUE : 'true' ;
    INT : 'int' ;
    STRING : 'string' ;
    BOOL : 'bool' ;
    VOID : 'void' ;
    LIST : 'list' ;
    IN : 'in' ;
    NULL : 'null' ;
    NEW : 'new' ;
    PRINT : 'print' ;

    IDENTIFIER
        : ('_' | [A-Z] | [a-z])+ ('_' | [a-z] | [A-Z] | [0-9])*
        ;

    intLiteral : ZERO | POS_INT | SUB POS_INT ;
    POS_INT : [1-9][0-9]* ;
    ZERO : '0' ;
    STRING_LITERAL : '"' ~('"')+ '"';
    BOOL_LITERAL : FALSE | TRUE;

    // separators
    LPAREN:             '(';
    RPAREN:             ')';
    LBRACE:             '{';
    RBRACE:             '}';
    LBRACK:             '[';
    RBRACK:             ']';
    SEMI:               ';';
    COMMA:              ',';
    DOT:                '.';
    ARROW:              '->';


    // operators
    ASSIGN: '=';
    GT: '>';
    LT: '<';
    NOT: '!';
    TILDE: '~';
    QUESTION: '?';
    COLON: ':';
    EQUAL: '==';
    LE: '<=';
    GE: '>=';
    NOTEQUAL: '!=';
    AND: '&&';
    OR:  '||';
    INC: '++';
    DEC: '--';
    ADD: '+';
    SUB: '-';
    MUL: '*';
    DIV: '/';
    BITAND: '&';
    BITOR: '|';
    CARET: '^';
    MOD: '%';


    // keywords



    COMMENT
        : '//' .*? '\n' -> skip
        ;


     WS
        : [ \t\r\n]+ -> skip
        ;

///---------------------------------------------------------------------------------------------
///---------------------------------------------------------------------------------------------
///---------------------------------------------------------------------------------------------
///---------------------------------------------------------------------------------------------
///---------------------------------------------------------------------------------------------
///---------------------------------------------------------------------------------------------
